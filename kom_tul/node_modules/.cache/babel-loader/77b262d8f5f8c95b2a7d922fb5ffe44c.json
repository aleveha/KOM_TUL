{"ast":null,"code":"var _jsxFileName = \"/Users/aleveha/WebstormProjects/KOM_TUL/kom_tul/src/components/Common/InputNewsForm.tsx\";\nimport { Button, CircularProgress, TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport moment from \"moment\";\nconst InputNewsSchema = yup.object().shape({\n  name: yup.string().min(3, \"Too short\").max(250, \"Too long\").required(\"Required\"),\n  content: yup.string().min(3, \"Too short\").max(3000, \"Too long\").required(\"Required\")\n});\n\nconst InputNewsForm = props => {\n  const addNews = values => {\n    return new Promise(resolve => {\n      fetch('http://localhost:3000/addNews', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values)\n      }).then(response => response.json()).then(data => resolve(data));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: props.news,\n    validationSchema: InputNewsSchema,\n    onSubmit: (values, actions) => {\n      console.log({ ...values,\n        date: moment().format('YYYY.MM.DD')\n      }); // addNews(values).then(res => {\n      //     if (typeof res === \"boolean\") {\n      //         console.log(res);\n      //     } else {\n      //         console.log(\"Neco se nepovedlo!\");\n      //     }\n      // });\n\n      actions.setSubmitting(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, props => {\n    const {\n      values,\n      touched,\n      errors,\n      handleBlur,\n      handleChange,\n      isSubmitting\n    } = props;\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"titleSecond\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 29\n      }\n    }, \"Nazev novinky\"), /*#__PURE__*/React.createElement(TextField, {\n      type: \"text\",\n      name: \"name\",\n      fullWidth: true,\n      variant: \"outlined\",\n      size: \"small\",\n      value: values.name,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.name && touched.name && errors.name,\n      error: !!(errors.name && touched.name),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"titleSecond\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }, \"Obsah novinky\"), /*#__PURE__*/React.createElement(TextField, {\n      type: \"text\",\n      name: \"content\",\n      fullWidth: true,\n      variant: \"outlined\",\n      size: \"small\",\n      multiline: true,\n      value: values.content,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.content && touched.content && errors.content,\n      error: !!(errors.content && touched.content),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }), isSubmitting ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: \"2rem 0\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 50,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 37\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      style: {\n        margin: \"0.5rem\",\n        color: \"var(--blue)\"\n      },\n      color: \"default\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 37\n      }\n    }, \"Nahrat\")));\n  }));\n};\n\n_c = InputNewsForm;\nexport default InputNewsForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputNewsForm\");","map":{"version":3,"sources":["/Users/aleveha/WebstormProjects/KOM_TUL/kom_tul/src/components/Common/InputNewsForm.tsx"],"names":["Button","CircularProgress","TextField","React","Formik","Form","yup","moment","InputNewsSchema","object","shape","name","string","min","max","required","content","InputNewsForm","props","addNews","values","Promise","resolve","fetch","method","headers","body","JSON","stringify","then","response","json","data","news","actions","console","log","date","format","setSubmitting","touched","errors","handleBlur","handleChange","isSubmitting","display","justifyContent","alignItems","margin","color"],"mappings":"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","sourcesContent":["import {Button, CircularProgress, TextField} from \"@material-ui/core\";\nimport React from \"react\";\nimport {\n    Formik,\n    FormikProps,\n    Form,\n} from 'formik';\nimport * as yup from 'yup';\nimport {INews} from \"./News\";\nimport moment from \"moment\";\n\nconst InputNewsSchema = yup.object().shape({\n    name: yup.string().min(3, \"Too short\").max(250, \"Too long\").required(\"Required\"),\n    content: yup.string().min(3, \"Too short\").max(3000, \"Too long\").required(\"Required\")\n});\n\nconst InputNewsForm = (props: { news: INews, setNews: (value: INews) => void }) => {\n\n    const addNews = (values: INews) => {\n        return new Promise(((resolve) => {\n            fetch('http://localhost:3000/addNews', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(values),\n            })\n                .then(response => response.json())\n                .then(data => resolve(data));\n        }))\n    }\n\n    return (\n        <div className=\"inputContainer\">\n            <Formik\n                initialValues={props.news}\n                validationSchema={InputNewsSchema}\n                onSubmit={(values: INews, actions) => {\n                    console.log({...values, date: moment().format('YYYY.MM.DD')});\n                    // addNews(values).then(res => {\n                    //     if (typeof res === \"boolean\") {\n                    //         console.log(res);\n                    //     } else {\n                    //         console.log(\"Neco se nepovedlo!\");\n                    //     }\n                    // });\n                    actions.setSubmitting(false);\n                }}\n            >\n                {(props: FormikProps<INews>) => {\n                    const {\n                        values,\n                        touched,\n                        errors,\n                        handleBlur,\n                        handleChange,\n                        isSubmitting\n                    } = props;\n                    return (\n                        <Form>\n                            <p className=\"titleSecond\">Nazev novinky</p>\n                            <TextField\n                                type=\"text\"\n                                name=\"name\"\n                                fullWidth={true}\n                                variant=\"outlined\"\n                                size=\"small\"\n                                value={values.name}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                helperText={errors.name && touched.name && errors.name}\n                                error={!!(errors.name && touched.name)}\n                            />\n\n                            <p className=\"titleSecond\">Obsah novinky</p>\n                            <TextField\n                                type=\"text\"\n                                name=\"content\"\n                                fullWidth={true}\n                                variant=\"outlined\"\n                                size=\"small\"\n                                multiline={true}\n                                value={values.content}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                helperText={errors.content && touched.content && errors.content}\n                                error={!!(errors.content && touched.content)}\n                            />\n\n                            {isSubmitting ?\n                                <div style={{\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    margin: \"2rem 0\"\n                                }}>\n                                    <CircularProgress size={50}/>\n                                </div> :\n                                <div className=\"buttons\">\n                                    <Button\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        style={{margin: \"0.5rem\", color: \"var(--blue)\"}}\n                                        color=\"default\"\n                                    >Nahrat</Button>\n                                </div>}\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n}\n\nexport default InputNewsForm;"]},"metadata":{},"sourceType":"module"}